syntax = "proto3";
package customer;

option go_package = ".;autogen";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

message EchoMessage {
     string value = 1;
}


message SocialCountResponse {
    int64 count  = 1;
}

message SocialActivityList {
  repeated SocialActivity activity = 1;
}

message MediaDimensions {
  int32 width = 1; /* width of image */
  int32 height = 2; /* height of image */
}

message SocialActivity {
  string sourceUri = 1; /* originating URI for content */
  string mediaUrl = 2;  /* URL of media to display */
  string text = 3; /* text/comment/caption that goes with media if any */
  MediaDimensions dimensions = 4; /* Image dimensions */
  bool is_video =5; /* boolean that denotes if media is a video */
  map<string, string> socialLove= 6;
}

message EmailContact {
    string email = 1;
    string description = 2;
    string domain = 3;
}


message SocialType {
    string type = 1;
    int32 limit = 2;
    int32 page_num = 3;
    int32 page_size = 4;
}

message SocialMetaData {
    int32 count = 1;
}

message SocialTypeList {
    repeated SocialType types = 1;
}

message EmailContactList {
    repeated EmailContact emailContacts = 1;
}

message GenericFilter {
    string domain = 1;
}


// The Customer service definition.
service Social {   
  //Nixie
  rpc GetEmailContactList(GenericFilter) returns (EmailContactList) {
        option (google.api.http) = { 
            get: "/v1.0/social/contact/list" 
        };
  }

  //TODO: send email

  //Social
  rpc GetSocialTypes(google.protobuf.Empty) returns (SocialTypeList) {
        option (google.api.http) = { 
            get: "/v1.0/social/types" 
        };
  }

  //GetSocialCount returns the total number of followers 
  rpc GetSocialCount(SocialType) returns (SocialCountResponse) {
        option (google.api.http) = { 
            get: "/v1.0/social/{type}/count" 
        };
  }


  rpc GetSocialActivity(SocialType) returns (SocialActivityList) {
    option (google.api.http) = {
      get: "/v1.0/social/{type}/activity"
    };
  }



  rpc Echo(EchoMessage) returns (EchoMessage) {
		option (google.api.http) = {
          get: "/v1.0/echo"
		};
	}


}
