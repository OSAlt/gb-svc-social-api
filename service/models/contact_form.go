// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ContactForm is an object representing the database table.
type ContactForm struct {
	ContactFormID int64  `boil:"contact_form_id" json:"contact_form_id" toml:"contact_form_id" yaml:"contact_form_id"`
	Email         string `boil:"email" json:"email" toml:"email" yaml:"email"`
	Description   string `boil:"description" json:"description" toml:"description" yaml:"description"`
	Domain        string `boil:"domain" json:"domain" toml:"domain" yaml:"domain"`

	R *contactFormR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contactFormL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContactFormColumns = struct {
	ContactFormID string
	Email         string
	Description   string
	Domain        string
}{
	ContactFormID: "contact_form_id",
	Email:         "email",
	Description:   "description",
	Domain:        "domain",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var ContactFormWhere = struct {
	ContactFormID whereHelperint64
	Email         whereHelperstring
	Description   whereHelperstring
	Domain        whereHelperstring
}{
	ContactFormID: whereHelperint64{field: "\"nixie\".\"contact_form\".\"contact_form_id\""},
	Email:         whereHelperstring{field: "\"nixie\".\"contact_form\".\"email\""},
	Description:   whereHelperstring{field: "\"nixie\".\"contact_form\".\"description\""},
	Domain:        whereHelperstring{field: "\"nixie\".\"contact_form\".\"domain\""},
}

// ContactFormRels is where relationship names are stored.
var ContactFormRels = struct {
}{}

// contactFormR is where relationships are stored.
type contactFormR struct {
}

// NewStruct creates a new relationship struct
func (*contactFormR) NewStruct() *contactFormR {
	return &contactFormR{}
}

// contactFormL is where Load methods for each relationship are stored.
type contactFormL struct{}

var (
	contactFormAllColumns            = []string{"contact_form_id", "email", "description", "domain"}
	contactFormColumnsWithoutDefault = []string{"email", "description"}
	contactFormColumnsWithDefault    = []string{"contact_form_id", "domain"}
	contactFormPrimaryKeyColumns     = []string{"contact_form_id"}
)

type (
	// ContactFormSlice is an alias for a slice of pointers to ContactForm.
	// This should generally be used opposed to []ContactForm.
	ContactFormSlice []*ContactForm
	// ContactFormHook is the signature for custom ContactForm hook methods
	ContactFormHook func(context.Context, boil.ContextExecutor, *ContactForm) error

	contactFormQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contactFormType                 = reflect.TypeOf(&ContactForm{})
	contactFormMapping              = queries.MakeStructMapping(contactFormType)
	contactFormPrimaryKeyMapping, _ = queries.BindMapping(contactFormType, contactFormMapping, contactFormPrimaryKeyColumns)
	contactFormInsertCacheMut       sync.RWMutex
	contactFormInsertCache          = make(map[string]insertCache)
	contactFormUpdateCacheMut       sync.RWMutex
	contactFormUpdateCache          = make(map[string]updateCache)
	contactFormUpsertCacheMut       sync.RWMutex
	contactFormUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contactFormBeforeInsertHooks []ContactFormHook
var contactFormBeforeUpdateHooks []ContactFormHook
var contactFormBeforeDeleteHooks []ContactFormHook
var contactFormBeforeUpsertHooks []ContactFormHook

var contactFormAfterInsertHooks []ContactFormHook
var contactFormAfterSelectHooks []ContactFormHook
var contactFormAfterUpdateHooks []ContactFormHook
var contactFormAfterDeleteHooks []ContactFormHook
var contactFormAfterUpsertHooks []ContactFormHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContactForm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContactForm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContactForm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContactForm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContactForm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContactForm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContactForm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContactForm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContactForm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contactFormAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContactFormHook registers your hook function for all future operations.
func AddContactFormHook(hookPoint boil.HookPoint, contactFormHook ContactFormHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		contactFormBeforeInsertHooks = append(contactFormBeforeInsertHooks, contactFormHook)
	case boil.BeforeUpdateHook:
		contactFormBeforeUpdateHooks = append(contactFormBeforeUpdateHooks, contactFormHook)
	case boil.BeforeDeleteHook:
		contactFormBeforeDeleteHooks = append(contactFormBeforeDeleteHooks, contactFormHook)
	case boil.BeforeUpsertHook:
		contactFormBeforeUpsertHooks = append(contactFormBeforeUpsertHooks, contactFormHook)
	case boil.AfterInsertHook:
		contactFormAfterInsertHooks = append(contactFormAfterInsertHooks, contactFormHook)
	case boil.AfterSelectHook:
		contactFormAfterSelectHooks = append(contactFormAfterSelectHooks, contactFormHook)
	case boil.AfterUpdateHook:
		contactFormAfterUpdateHooks = append(contactFormAfterUpdateHooks, contactFormHook)
	case boil.AfterDeleteHook:
		contactFormAfterDeleteHooks = append(contactFormAfterDeleteHooks, contactFormHook)
	case boil.AfterUpsertHook:
		contactFormAfterUpsertHooks = append(contactFormAfterUpsertHooks, contactFormHook)
	}
}

// One returns a single contactForm record from the query.
func (q contactFormQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContactForm, error) {
	o := &ContactForm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for contact_form")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ContactForm records from the query.
func (q contactFormQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContactFormSlice, error) {
	var o []*ContactForm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContactForm slice")
	}

	if len(contactFormAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ContactForm records in the query.
func (q contactFormQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count contact_form rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q contactFormQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if contact_form exists")
	}

	return count > 0, nil
}

// ContactForms retrieves all the records using an executor.
func ContactForms(mods ...qm.QueryMod) contactFormQuery {
	mods = append(mods, qm.From("\"nixie\".\"contact_form\""))
	return contactFormQuery{NewQuery(mods...)}
}

// FindContactForm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContactForm(ctx context.Context, exec boil.ContextExecutor, contactFormID int64, selectCols ...string) (*ContactForm, error) {
	contactFormObj := &ContactForm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"nixie\".\"contact_form\" where \"contact_form_id\"=$1", sel,
	)

	q := queries.Raw(query, contactFormID)

	err := q.Bind(ctx, exec, contactFormObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from contact_form")
	}

	return contactFormObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContactForm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contact_form provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contactFormColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contactFormInsertCacheMut.RLock()
	cache, cached := contactFormInsertCache[key]
	contactFormInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contactFormAllColumns,
			contactFormColumnsWithDefault,
			contactFormColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contactFormType, contactFormMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contactFormType, contactFormMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"nixie\".\"contact_form\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"nixie\".\"contact_form\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into contact_form")
	}

	if !cached {
		contactFormInsertCacheMut.Lock()
		contactFormInsertCache[key] = cache
		contactFormInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ContactForm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContactForm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contactFormUpdateCacheMut.RLock()
	cache, cached := contactFormUpdateCache[key]
	contactFormUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contactFormAllColumns,
			contactFormPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update contact_form, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"nixie\".\"contact_form\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contactFormPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contactFormType, contactFormMapping, append(wl, contactFormPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update contact_form row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for contact_form")
	}

	if !cached {
		contactFormUpdateCacheMut.Lock()
		contactFormUpdateCache[key] = cache
		contactFormUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q contactFormQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for contact_form")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for contact_form")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContactFormSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contactFormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"nixie\".\"contact_form\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contactFormPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contactForm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contactForm")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContactForm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no contact_form provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contactFormColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contactFormUpsertCacheMut.RLock()
	cache, cached := contactFormUpsertCache[key]
	contactFormUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			contactFormAllColumns,
			contactFormColumnsWithDefault,
			contactFormColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			contactFormAllColumns,
			contactFormPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert contact_form, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(contactFormPrimaryKeyColumns))
			copy(conflict, contactFormPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"nixie\".\"contact_form\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(contactFormType, contactFormMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contactFormType, contactFormMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert contact_form")
	}

	if !cached {
		contactFormUpsertCacheMut.Lock()
		contactFormUpsertCache[key] = cache
		contactFormUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ContactForm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContactForm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContactForm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contactFormPrimaryKeyMapping)
	sql := "DELETE FROM \"nixie\".\"contact_form\" WHERE \"contact_form_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from contact_form")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for contact_form")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q contactFormQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contactFormQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contact_form")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contact_form")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContactFormSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contactFormBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contactFormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"nixie\".\"contact_form\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contactFormPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contactForm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for contact_form")
	}

	if len(contactFormAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContactForm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContactForm(ctx, exec, o.ContactFormID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContactFormSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContactFormSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contactFormPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"nixie\".\"contact_form\".* FROM \"nixie\".\"contact_form\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contactFormPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContactFormSlice")
	}

	*o = slice

	return nil
}

// ContactFormExists checks if the ContactForm row exists.
func ContactFormExists(ctx context.Context, exec boil.ContextExecutor, contactFormID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"nixie\".\"contact_form\" where \"contact_form_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, contactFormID)
	}
	row := exec.QueryRowContext(ctx, sql, contactFormID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if contact_form exists")
	}

	return exists, nil
}
