// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SocialAppType is an object representing the database table.
type SocialAppType struct {
	SocialAppType string `boil:"social_app_type" json:"social_app_type" toml:"social_app_type" yaml:"social_app_type"`

	R *socialAppTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L socialAppTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SocialAppTypeColumns = struct {
	SocialAppType string
}{
	SocialAppType: "social_app_type",
}

// Generated where

var SocialAppTypeWhere = struct {
	SocialAppType whereHelperstring
}{
	SocialAppType: whereHelperstring{field: "\"config\".\"social_app_type\".\"social_app_type\""},
}

// SocialAppTypeRels is where relationship names are stored.
var SocialAppTypeRels = struct {
	SocialApp string
}{
	SocialApp: "SocialApp",
}

// socialAppTypeR is where relationships are stored.
type socialAppTypeR struct {
	SocialApp *SocialApp `boil:"SocialApp" json:"SocialApp" toml:"SocialApp" yaml:"SocialApp"`
}

// NewStruct creates a new relationship struct
func (*socialAppTypeR) NewStruct() *socialAppTypeR {
	return &socialAppTypeR{}
}

// socialAppTypeL is where Load methods for each relationship are stored.
type socialAppTypeL struct{}

var (
	socialAppTypeAllColumns            = []string{"social_app_type"}
	socialAppTypeColumnsWithoutDefault = []string{"social_app_type"}
	socialAppTypeColumnsWithDefault    = []string{}
	socialAppTypePrimaryKeyColumns     = []string{"social_app_type"}
)

type (
	// SocialAppTypeSlice is an alias for a slice of pointers to SocialAppType.
	// This should generally be used opposed to []SocialAppType.
	SocialAppTypeSlice []*SocialAppType
	// SocialAppTypeHook is the signature for custom SocialAppType hook methods
	SocialAppTypeHook func(context.Context, boil.ContextExecutor, *SocialAppType) error

	socialAppTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	socialAppTypeType                 = reflect.TypeOf(&SocialAppType{})
	socialAppTypeMapping              = queries.MakeStructMapping(socialAppTypeType)
	socialAppTypePrimaryKeyMapping, _ = queries.BindMapping(socialAppTypeType, socialAppTypeMapping, socialAppTypePrimaryKeyColumns)
	socialAppTypeInsertCacheMut       sync.RWMutex
	socialAppTypeInsertCache          = make(map[string]insertCache)
	socialAppTypeUpdateCacheMut       sync.RWMutex
	socialAppTypeUpdateCache          = make(map[string]updateCache)
	socialAppTypeUpsertCacheMut       sync.RWMutex
	socialAppTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var socialAppTypeBeforeInsertHooks []SocialAppTypeHook
var socialAppTypeBeforeUpdateHooks []SocialAppTypeHook
var socialAppTypeBeforeDeleteHooks []SocialAppTypeHook
var socialAppTypeBeforeUpsertHooks []SocialAppTypeHook

var socialAppTypeAfterInsertHooks []SocialAppTypeHook
var socialAppTypeAfterSelectHooks []SocialAppTypeHook
var socialAppTypeAfterUpdateHooks []SocialAppTypeHook
var socialAppTypeAfterDeleteHooks []SocialAppTypeHook
var socialAppTypeAfterUpsertHooks []SocialAppTypeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SocialAppType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SocialAppType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SocialAppType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SocialAppType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SocialAppType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SocialAppType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SocialAppType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SocialAppType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SocialAppType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSocialAppTypeHook registers your hook function for all future operations.
func AddSocialAppTypeHook(hookPoint boil.HookPoint, socialAppTypeHook SocialAppTypeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		socialAppTypeBeforeInsertHooks = append(socialAppTypeBeforeInsertHooks, socialAppTypeHook)
	case boil.BeforeUpdateHook:
		socialAppTypeBeforeUpdateHooks = append(socialAppTypeBeforeUpdateHooks, socialAppTypeHook)
	case boil.BeforeDeleteHook:
		socialAppTypeBeforeDeleteHooks = append(socialAppTypeBeforeDeleteHooks, socialAppTypeHook)
	case boil.BeforeUpsertHook:
		socialAppTypeBeforeUpsertHooks = append(socialAppTypeBeforeUpsertHooks, socialAppTypeHook)
	case boil.AfterInsertHook:
		socialAppTypeAfterInsertHooks = append(socialAppTypeAfterInsertHooks, socialAppTypeHook)
	case boil.AfterSelectHook:
		socialAppTypeAfterSelectHooks = append(socialAppTypeAfterSelectHooks, socialAppTypeHook)
	case boil.AfterUpdateHook:
		socialAppTypeAfterUpdateHooks = append(socialAppTypeAfterUpdateHooks, socialAppTypeHook)
	case boil.AfterDeleteHook:
		socialAppTypeAfterDeleteHooks = append(socialAppTypeAfterDeleteHooks, socialAppTypeHook)
	case boil.AfterUpsertHook:
		socialAppTypeAfterUpsertHooks = append(socialAppTypeAfterUpsertHooks, socialAppTypeHook)
	}
}

// One returns a single socialAppType record from the query.
func (q socialAppTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SocialAppType, error) {
	o := &SocialAppType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for social_app_type")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SocialAppType records from the query.
func (q socialAppTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (SocialAppTypeSlice, error) {
	var o []*SocialAppType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SocialAppType slice")
	}

	if len(socialAppTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SocialAppType records in the query.
func (q socialAppTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count social_app_type rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q socialAppTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if social_app_type exists")
	}

	return count > 0, nil
}

// SocialApp pointed to by the foreign key.
func (o *SocialAppType) SocialApp(mods ...qm.QueryMod) socialAppQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"social_app_type\" = ?", o.SocialAppType),
	}

	queryMods = append(queryMods, mods...)

	query := SocialApps(queryMods...)
	queries.SetFrom(query.Query, "\"config\".\"social_app\"")

	return query
}

// LoadSocialApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (socialAppTypeL) LoadSocialApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSocialAppType interface{}, mods queries.Applicator) error {
	var slice []*SocialAppType
	var object *SocialAppType

	if singular {
		object = maybeSocialAppType.(*SocialAppType)
	} else {
		slice = *maybeSocialAppType.(*[]*SocialAppType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &socialAppTypeR{}
		}
		args = append(args, object.SocialAppType)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &socialAppTypeR{}
			}

			for _, a := range args {
				if a == obj.SocialAppType {
					continue Outer
				}
			}

			args = append(args, obj.SocialAppType)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config.social_app`),
		qm.WhereIn(`config.social_app.social_app_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SocialApp")
	}

	var resultSlice []*SocialApp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SocialApp")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for social_app")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for social_app")
	}

	if len(socialAppTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SocialApp = foreign
		if foreign.R == nil {
			foreign.R = &socialAppR{}
		}
		foreign.R.SocialAppSocialAppType = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SocialAppType == foreign.SocialAppType {
				local.R.SocialApp = foreign
				if foreign.R == nil {
					foreign.R = &socialAppR{}
				}
				foreign.R.SocialAppSocialAppType = local
				break
			}
		}
	}

	return nil
}

// SetSocialApp of the socialAppType to the related item.
// Sets o.R.SocialApp to related.
// Adds o to related.R.SocialAppSocialAppType.
func (o *SocialAppType) SetSocialApp(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SocialApp) error {
	var err error

	if insert {
		related.SocialAppType = o.SocialAppType

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"config\".\"social_app\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"social_app_type"}),
			strmangle.WhereClause("\"", "\"", 2, socialAppPrimaryKeyColumns),
		)
		values := []interface{}{o.SocialAppType, related.AppID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.SocialAppType = o.SocialAppType

	}

	if o.R == nil {
		o.R = &socialAppTypeR{
			SocialApp: related,
		}
	} else {
		o.R.SocialApp = related
	}

	if related.R == nil {
		related.R = &socialAppR{
			SocialAppSocialAppType: o,
		}
	} else {
		related.R.SocialAppSocialAppType = o
	}
	return nil
}

// SocialAppTypes retrieves all the records using an executor.
func SocialAppTypes(mods ...qm.QueryMod) socialAppTypeQuery {
	mods = append(mods, qm.From("\"config\".\"social_app_type\""))
	return socialAppTypeQuery{NewQuery(mods...)}
}

// FindSocialAppType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSocialAppType(ctx context.Context, exec boil.ContextExecutor, socialAppType string, selectCols ...string) (*SocialAppType, error) {
	socialAppTypeObj := &SocialAppType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config\".\"social_app_type\" where \"social_app_type\"=$1", sel,
	)

	q := queries.Raw(query, socialAppType)

	err := q.Bind(ctx, exec, socialAppTypeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from social_app_type")
	}

	return socialAppTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SocialAppType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no social_app_type provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialAppTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	socialAppTypeInsertCacheMut.RLock()
	cache, cached := socialAppTypeInsertCache[key]
	socialAppTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			socialAppTypeAllColumns,
			socialAppTypeColumnsWithDefault,
			socialAppTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(socialAppTypeType, socialAppTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(socialAppTypeType, socialAppTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config\".\"social_app_type\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config\".\"social_app_type\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into social_app_type")
	}

	if !cached {
		socialAppTypeInsertCacheMut.Lock()
		socialAppTypeInsertCache[key] = cache
		socialAppTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SocialAppType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SocialAppType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	socialAppTypeUpdateCacheMut.RLock()
	cache, cached := socialAppTypeUpdateCache[key]
	socialAppTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			socialAppTypeAllColumns,
			socialAppTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update social_app_type, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config\".\"social_app_type\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, socialAppTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(socialAppTypeType, socialAppTypeMapping, append(wl, socialAppTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update social_app_type row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for social_app_type")
	}

	if !cached {
		socialAppTypeUpdateCacheMut.Lock()
		socialAppTypeUpdateCache[key] = cache
		socialAppTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q socialAppTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for social_app_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for social_app_type")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SocialAppTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialAppTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config\".\"social_app_type\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, socialAppTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in socialAppType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all socialAppType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SocialAppType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no social_app_type provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialAppTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	socialAppTypeUpsertCacheMut.RLock()
	cache, cached := socialAppTypeUpsertCache[key]
	socialAppTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			socialAppTypeAllColumns,
			socialAppTypeColumnsWithDefault,
			socialAppTypeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			socialAppTypeAllColumns,
			socialAppTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert social_app_type, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(socialAppTypePrimaryKeyColumns))
			copy(conflict, socialAppTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"config\".\"social_app_type\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(socialAppTypeType, socialAppTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(socialAppTypeType, socialAppTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert social_app_type")
	}

	if !cached {
		socialAppTypeUpsertCacheMut.Lock()
		socialAppTypeUpsertCache[key] = cache
		socialAppTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SocialAppType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SocialAppType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SocialAppType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), socialAppTypePrimaryKeyMapping)
	sql := "DELETE FROM \"config\".\"social_app_type\" WHERE \"social_app_type\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from social_app_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for social_app_type")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q socialAppTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no socialAppTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from social_app_type")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for social_app_type")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SocialAppTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(socialAppTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialAppTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config\".\"social_app_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, socialAppTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from socialAppType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for social_app_type")
	}

	if len(socialAppTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SocialAppType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSocialAppType(ctx, exec, o.SocialAppType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SocialAppTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SocialAppTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialAppTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config\".\"social_app_type\".* FROM \"config\".\"social_app_type\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, socialAppTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SocialAppTypeSlice")
	}

	*o = slice

	return nil
}

// SocialAppTypeExists checks if the SocialAppType row exists.
func SocialAppTypeExists(ctx context.Context, exec boil.ContextExecutor, socialAppType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config\".\"social_app_type\" where \"social_app_type\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, socialAppType)
	}
	row := exec.QueryRowContext(ctx, sql, socialAppType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if social_app_type exists")
	}

	return exists, nil
}
