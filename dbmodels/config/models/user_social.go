// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserSocial is an object representing the database table.
type UserSocial struct {
	UserSocialID int64       `boil:"user_social_id" json:"user_social_id" toml:"user_social_id" yaml:"user_social_id"`
	AppID        int64       `boil:"app_id" json:"app_id" toml:"app_id" yaml:"app_id"`
	UserID       string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	MetaData     null.JSON   `boil:"meta_data" json:"meta_data,omitempty" toml:"meta_data" yaml:"meta_data,omitempty"`
	AccessToken  null.String `boil:"access_token" json:"access_token,omitempty" toml:"access_token" yaml:"access_token,omitempty"`
	SecretToken  null.String `boil:"secret_token" json:"secret_token,omitempty" toml:"secret_token" yaml:"secret_token,omitempty"`

	R *userSocialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userSocialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserSocialColumns = struct {
	UserSocialID string
	AppID        string
	UserID       string
	MetaData     string
	AccessToken  string
	SecretToken  string
}{
	UserSocialID: "user_social_id",
	AppID:        "app_id",
	UserID:       "user_id",
	MetaData:     "meta_data",
	AccessToken:  "access_token",
	SecretToken:  "secret_token",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserSocialWhere = struct {
	UserSocialID whereHelperint64
	AppID        whereHelperint64
	UserID       whereHelperstring
	MetaData     whereHelpernull_JSON
	AccessToken  whereHelpernull_String
	SecretToken  whereHelpernull_String
}{
	UserSocialID: whereHelperint64{field: "\"config\".\"user_social\".\"user_social_id\""},
	AppID:        whereHelperint64{field: "\"config\".\"user_social\".\"app_id\""},
	UserID:       whereHelperstring{field: "\"config\".\"user_social\".\"user_id\""},
	MetaData:     whereHelpernull_JSON{field: "\"config\".\"user_social\".\"meta_data\""},
	AccessToken:  whereHelpernull_String{field: "\"config\".\"user_social\".\"access_token\""},
	SecretToken:  whereHelpernull_String{field: "\"config\".\"user_social\".\"secret_token\""},
}

// UserSocialRels is where relationship names are stored.
var UserSocialRels = struct {
	App string
}{
	App: "App",
}

// userSocialR is where relationships are stored.
type userSocialR struct {
	App *SocialApp `boil:"App" json:"App" toml:"App" yaml:"App"`
}

// NewStruct creates a new relationship struct
func (*userSocialR) NewStruct() *userSocialR {
	return &userSocialR{}
}

// userSocialL is where Load methods for each relationship are stored.
type userSocialL struct{}

var (
	userSocialAllColumns            = []string{"user_social_id", "app_id", "user_id", "meta_data", "access_token", "secret_token"}
	userSocialColumnsWithoutDefault = []string{"app_id", "user_id", "meta_data", "access_token", "secret_token"}
	userSocialColumnsWithDefault    = []string{"user_social_id"}
	userSocialPrimaryKeyColumns     = []string{"user_social_id"}
)

type (
	// UserSocialSlice is an alias for a slice of pointers to UserSocial.
	// This should generally be used opposed to []UserSocial.
	UserSocialSlice []*UserSocial
	// UserSocialHook is the signature for custom UserSocial hook methods
	UserSocialHook func(context.Context, boil.ContextExecutor, *UserSocial) error

	userSocialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userSocialType                 = reflect.TypeOf(&UserSocial{})
	userSocialMapping              = queries.MakeStructMapping(userSocialType)
	userSocialPrimaryKeyMapping, _ = queries.BindMapping(userSocialType, userSocialMapping, userSocialPrimaryKeyColumns)
	userSocialInsertCacheMut       sync.RWMutex
	userSocialInsertCache          = make(map[string]insertCache)
	userSocialUpdateCacheMut       sync.RWMutex
	userSocialUpdateCache          = make(map[string]updateCache)
	userSocialUpsertCacheMut       sync.RWMutex
	userSocialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userSocialBeforeInsertHooks []UserSocialHook
var userSocialBeforeUpdateHooks []UserSocialHook
var userSocialBeforeDeleteHooks []UserSocialHook
var userSocialBeforeUpsertHooks []UserSocialHook

var userSocialAfterInsertHooks []UserSocialHook
var userSocialAfterSelectHooks []UserSocialHook
var userSocialAfterUpdateHooks []UserSocialHook
var userSocialAfterDeleteHooks []UserSocialHook
var userSocialAfterUpsertHooks []UserSocialHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserSocial) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserSocial) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserSocial) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserSocial) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserSocial) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserSocial) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserSocial) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserSocial) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserSocial) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSocialAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserSocialHook registers your hook function for all future operations.
func AddUserSocialHook(hookPoint boil.HookPoint, userSocialHook UserSocialHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userSocialBeforeInsertHooks = append(userSocialBeforeInsertHooks, userSocialHook)
	case boil.BeforeUpdateHook:
		userSocialBeforeUpdateHooks = append(userSocialBeforeUpdateHooks, userSocialHook)
	case boil.BeforeDeleteHook:
		userSocialBeforeDeleteHooks = append(userSocialBeforeDeleteHooks, userSocialHook)
	case boil.BeforeUpsertHook:
		userSocialBeforeUpsertHooks = append(userSocialBeforeUpsertHooks, userSocialHook)
	case boil.AfterInsertHook:
		userSocialAfterInsertHooks = append(userSocialAfterInsertHooks, userSocialHook)
	case boil.AfterSelectHook:
		userSocialAfterSelectHooks = append(userSocialAfterSelectHooks, userSocialHook)
	case boil.AfterUpdateHook:
		userSocialAfterUpdateHooks = append(userSocialAfterUpdateHooks, userSocialHook)
	case boil.AfterDeleteHook:
		userSocialAfterDeleteHooks = append(userSocialAfterDeleteHooks, userSocialHook)
	case boil.AfterUpsertHook:
		userSocialAfterUpsertHooks = append(userSocialAfterUpsertHooks, userSocialHook)
	}
}

// One returns a single userSocial record from the query.
func (q userSocialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserSocial, error) {
	o := &UserSocial{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_social")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserSocial records from the query.
func (q userSocialQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSocialSlice, error) {
	var o []*UserSocial

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserSocial slice")
	}

	if len(userSocialAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserSocial records in the query.
func (q userSocialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_social rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userSocialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_social exists")
	}

	return count > 0, nil
}

// App pointed to by the foreign key.
func (o *UserSocial) App(mods ...qm.QueryMod) socialAppQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"app_id\" = ?", o.AppID),
	}

	queryMods = append(queryMods, mods...)

	query := SocialApps(queryMods...)
	queries.SetFrom(query.Query, "\"config\".\"social_app\"")

	return query
}

// LoadApp allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userSocialL) LoadApp(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserSocial interface{}, mods queries.Applicator) error {
	var slice []*UserSocial
	var object *UserSocial

	if singular {
		object = maybeUserSocial.(*UserSocial)
	} else {
		slice = *maybeUserSocial.(*[]*UserSocial)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userSocialR{}
		}
		args = append(args, object.AppID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userSocialR{}
			}

			for _, a := range args {
				if a == obj.AppID {
					continue Outer
				}
			}

			args = append(args, obj.AppID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config.social_app`),
		qm.WhereIn(`config.social_app.app_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SocialApp")
	}

	var resultSlice []*SocialApp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SocialApp")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for social_app")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for social_app")
	}

	if len(userSocialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.App = foreign
		if foreign.R == nil {
			foreign.R = &socialAppR{}
		}
		foreign.R.AppUserSocials = append(foreign.R.AppUserSocials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AppID == foreign.AppID {
				local.R.App = foreign
				if foreign.R == nil {
					foreign.R = &socialAppR{}
				}
				foreign.R.AppUserSocials = append(foreign.R.AppUserSocials, local)
				break
			}
		}
	}

	return nil
}

// SetApp of the userSocial to the related item.
// Sets o.R.App to related.
// Adds o to related.R.AppUserSocials.
func (o *UserSocial) SetApp(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SocialApp) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"config\".\"user_social\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"app_id"}),
		strmangle.WhereClause("\"", "\"", 2, userSocialPrimaryKeyColumns),
	)
	values := []interface{}{related.AppID, o.UserSocialID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AppID = related.AppID
	if o.R == nil {
		o.R = &userSocialR{
			App: related,
		}
	} else {
		o.R.App = related
	}

	if related.R == nil {
		related.R = &socialAppR{
			AppUserSocials: UserSocialSlice{o},
		}
	} else {
		related.R.AppUserSocials = append(related.R.AppUserSocials, o)
	}

	return nil
}

// UserSocials retrieves all the records using an executor.
func UserSocials(mods ...qm.QueryMod) userSocialQuery {
	mods = append(mods, qm.From("\"config\".\"user_social\""))
	return userSocialQuery{NewQuery(mods...)}
}

// FindUserSocial retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserSocial(ctx context.Context, exec boil.ContextExecutor, userSocialID int64, selectCols ...string) (*UserSocial, error) {
	userSocialObj := &UserSocial{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config\".\"user_social\" where \"user_social_id\"=$1", sel,
	)

	q := queries.Raw(query, userSocialID)

	err := q.Bind(ctx, exec, userSocialObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_social")
	}

	return userSocialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserSocial) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_social provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSocialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userSocialInsertCacheMut.RLock()
	cache, cached := userSocialInsertCache[key]
	userSocialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userSocialAllColumns,
			userSocialColumnsWithDefault,
			userSocialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userSocialType, userSocialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userSocialType, userSocialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config\".\"user_social\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config\".\"user_social\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_social")
	}

	if !cached {
		userSocialInsertCacheMut.Lock()
		userSocialInsertCache[key] = cache
		userSocialInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserSocial.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserSocial) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userSocialUpdateCacheMut.RLock()
	cache, cached := userSocialUpdateCache[key]
	userSocialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userSocialAllColumns,
			userSocialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_social, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config\".\"user_social\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userSocialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userSocialType, userSocialMapping, append(wl, userSocialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_social row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_social")
	}

	if !cached {
		userSocialUpdateCacheMut.Lock()
		userSocialUpdateCache[key] = cache
		userSocialUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userSocialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_social")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_social")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSocialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSocialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config\".\"user_social\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userSocialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userSocial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userSocial")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserSocial) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_social provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSocialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userSocialUpsertCacheMut.RLock()
	cache, cached := userSocialUpsertCache[key]
	userSocialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userSocialAllColumns,
			userSocialColumnsWithDefault,
			userSocialColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userSocialAllColumns,
			userSocialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_social, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userSocialPrimaryKeyColumns))
			copy(conflict, userSocialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"config\".\"user_social\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userSocialType, userSocialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userSocialType, userSocialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_social")
	}

	if !cached {
		userSocialUpsertCacheMut.Lock()
		userSocialUpsertCache[key] = cache
		userSocialUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserSocial record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserSocial) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserSocial provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userSocialPrimaryKeyMapping)
	sql := "DELETE FROM \"config\".\"user_social\" WHERE \"user_social_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_social")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_social")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userSocialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userSocialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_social")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_social")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSocialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userSocialBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSocialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config\".\"user_social\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSocialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userSocial slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_social")
	}

	if len(userSocialAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserSocial) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserSocial(ctx, exec, o.UserSocialID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSocialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSocialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSocialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config\".\"user_social\".* FROM \"config\".\"user_social\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSocialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserSocialSlice")
	}

	*o = slice

	return nil
}

// UserSocialExists checks if the UserSocial row exists.
func UserSocialExists(ctx context.Context, exec boil.ContextExecutor, userSocialID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config\".\"user_social\" where \"user_social_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userSocialID)
	}
	row := exec.QueryRowContext(ctx, sql, userSocialID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_social exists")
	}

	return exists, nil
}
