// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SocialApp is an object representing the database table.
type SocialApp struct {
	AppID         int64       `boil:"app_id" json:"app_id" toml:"app_id" yaml:"app_id"`
	SocialAppType string      `boil:"social_app_type" json:"social_app_type" toml:"social_app_type" yaml:"social_app_type"`
	ClientID      string      `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	Secret        string      `boil:"secret" json:"secret" toml:"secret" yaml:"secret"`
	CallbackURL   null.String `boil:"callback_url" json:"callback_url,omitempty" toml:"callback_url" yaml:"callback_url,omitempty"`

	R *socialAppR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L socialAppL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SocialAppColumns = struct {
	AppID         string
	SocialAppType string
	ClientID      string
	Secret        string
	CallbackURL   string
}{
	AppID:         "app_id",
	SocialAppType: "social_app_type",
	ClientID:      "client_id",
	Secret:        "secret",
	CallbackURL:   "callback_url",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SocialAppWhere = struct {
	AppID         whereHelperint64
	SocialAppType whereHelperstring
	ClientID      whereHelperstring
	Secret        whereHelperstring
	CallbackURL   whereHelpernull_String
}{
	AppID:         whereHelperint64{field: "\"config\".\"social_app\".\"app_id\""},
	SocialAppType: whereHelperstring{field: "\"config\".\"social_app\".\"social_app_type\""},
	ClientID:      whereHelperstring{field: "\"config\".\"social_app\".\"client_id\""},
	Secret:        whereHelperstring{field: "\"config\".\"social_app\".\"secret\""},
	CallbackURL:   whereHelpernull_String{field: "\"config\".\"social_app\".\"callback_url\""},
}

// SocialAppRels is where relationship names are stored.
var SocialAppRels = struct {
	SocialAppSocialAppType string
	AppUserSocials         string
}{
	SocialAppSocialAppType: "SocialAppSocialAppType",
	AppUserSocials:         "AppUserSocials",
}

// socialAppR is where relationships are stored.
type socialAppR struct {
	SocialAppSocialAppType *SocialAppType  `boil:"SocialAppSocialAppType" json:"SocialAppSocialAppType" toml:"SocialAppSocialAppType" yaml:"SocialAppSocialAppType"`
	AppUserSocials         UserSocialSlice `boil:"AppUserSocials" json:"AppUserSocials" toml:"AppUserSocials" yaml:"AppUserSocials"`
}

// NewStruct creates a new relationship struct
func (*socialAppR) NewStruct() *socialAppR {
	return &socialAppR{}
}

// socialAppL is where Load methods for each relationship are stored.
type socialAppL struct{}

var (
	socialAppAllColumns            = []string{"app_id", "social_app_type", "client_id", "secret", "callback_url"}
	socialAppColumnsWithoutDefault = []string{"social_app_type", "client_id", "secret", "callback_url"}
	socialAppColumnsWithDefault    = []string{"app_id"}
	socialAppPrimaryKeyColumns     = []string{"app_id"}
)

type (
	// SocialAppSlice is an alias for a slice of pointers to SocialApp.
	// This should generally be used opposed to []SocialApp.
	SocialAppSlice []*SocialApp
	// SocialAppHook is the signature for custom SocialApp hook methods
	SocialAppHook func(context.Context, boil.ContextExecutor, *SocialApp) error

	socialAppQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	socialAppType                 = reflect.TypeOf(&SocialApp{})
	socialAppMapping              = queries.MakeStructMapping(socialAppType)
	socialAppPrimaryKeyMapping, _ = queries.BindMapping(socialAppType, socialAppMapping, socialAppPrimaryKeyColumns)
	socialAppInsertCacheMut       sync.RWMutex
	socialAppInsertCache          = make(map[string]insertCache)
	socialAppUpdateCacheMut       sync.RWMutex
	socialAppUpdateCache          = make(map[string]updateCache)
	socialAppUpsertCacheMut       sync.RWMutex
	socialAppUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var socialAppBeforeInsertHooks []SocialAppHook
var socialAppBeforeUpdateHooks []SocialAppHook
var socialAppBeforeDeleteHooks []SocialAppHook
var socialAppBeforeUpsertHooks []SocialAppHook

var socialAppAfterInsertHooks []SocialAppHook
var socialAppAfterSelectHooks []SocialAppHook
var socialAppAfterUpdateHooks []SocialAppHook
var socialAppAfterDeleteHooks []SocialAppHook
var socialAppAfterUpsertHooks []SocialAppHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SocialApp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SocialApp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SocialApp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SocialApp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SocialApp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SocialApp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SocialApp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SocialApp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SocialApp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAppAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSocialAppHook registers your hook function for all future operations.
func AddSocialAppHook(hookPoint boil.HookPoint, socialAppHook SocialAppHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		socialAppBeforeInsertHooks = append(socialAppBeforeInsertHooks, socialAppHook)
	case boil.BeforeUpdateHook:
		socialAppBeforeUpdateHooks = append(socialAppBeforeUpdateHooks, socialAppHook)
	case boil.BeforeDeleteHook:
		socialAppBeforeDeleteHooks = append(socialAppBeforeDeleteHooks, socialAppHook)
	case boil.BeforeUpsertHook:
		socialAppBeforeUpsertHooks = append(socialAppBeforeUpsertHooks, socialAppHook)
	case boil.AfterInsertHook:
		socialAppAfterInsertHooks = append(socialAppAfterInsertHooks, socialAppHook)
	case boil.AfterSelectHook:
		socialAppAfterSelectHooks = append(socialAppAfterSelectHooks, socialAppHook)
	case boil.AfterUpdateHook:
		socialAppAfterUpdateHooks = append(socialAppAfterUpdateHooks, socialAppHook)
	case boil.AfterDeleteHook:
		socialAppAfterDeleteHooks = append(socialAppAfterDeleteHooks, socialAppHook)
	case boil.AfterUpsertHook:
		socialAppAfterUpsertHooks = append(socialAppAfterUpsertHooks, socialAppHook)
	}
}

// One returns a single socialApp record from the query.
func (q socialAppQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SocialApp, error) {
	o := &SocialApp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for social_app")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SocialApp records from the query.
func (q socialAppQuery) All(ctx context.Context, exec boil.ContextExecutor) (SocialAppSlice, error) {
	var o []*SocialApp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SocialApp slice")
	}

	if len(socialAppAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SocialApp records in the query.
func (q socialAppQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count social_app rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q socialAppQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if social_app exists")
	}

	return count > 0, nil
}

// SocialAppSocialAppType pointed to by the foreign key.
func (o *SocialApp) SocialAppSocialAppType(mods ...qm.QueryMod) socialAppTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"social_app_type\" = ?", o.SocialAppType),
	}

	queryMods = append(queryMods, mods...)

	query := SocialAppTypes(queryMods...)
	queries.SetFrom(query.Query, "\"config\".\"social_app_type\"")

	return query
}

// AppUserSocials retrieves all the user_social's UserSocials with an executor via app_id column.
func (o *SocialApp) AppUserSocials(mods ...qm.QueryMod) userSocialQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"config\".\"user_social\".\"app_id\"=?", o.AppID),
	)

	query := UserSocials(queryMods...)
	queries.SetFrom(query.Query, "\"config\".\"user_social\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"config\".\"user_social\".*"})
	}

	return query
}

// LoadSocialAppSocialAppType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (socialAppL) LoadSocialAppSocialAppType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSocialApp interface{}, mods queries.Applicator) error {
	var slice []*SocialApp
	var object *SocialApp

	if singular {
		object = maybeSocialApp.(*SocialApp)
	} else {
		slice = *maybeSocialApp.(*[]*SocialApp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &socialAppR{}
		}
		args = append(args, object.SocialAppType)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &socialAppR{}
			}

			for _, a := range args {
				if a == obj.SocialAppType {
					continue Outer
				}
			}

			args = append(args, obj.SocialAppType)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config.social_app_type`),
		qm.WhereIn(`config.social_app_type.social_app_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SocialAppType")
	}

	var resultSlice []*SocialAppType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SocialAppType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for social_app_type")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for social_app_type")
	}

	if len(socialAppAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SocialAppSocialAppType = foreign
		if foreign.R == nil {
			foreign.R = &socialAppTypeR{}
		}
		foreign.R.SocialApp = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SocialAppType == foreign.SocialAppType {
				local.R.SocialAppSocialAppType = foreign
				if foreign.R == nil {
					foreign.R = &socialAppTypeR{}
				}
				foreign.R.SocialApp = local
				break
			}
		}
	}

	return nil
}

// LoadAppUserSocials allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (socialAppL) LoadAppUserSocials(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSocialApp interface{}, mods queries.Applicator) error {
	var slice []*SocialApp
	var object *SocialApp

	if singular {
		object = maybeSocialApp.(*SocialApp)
	} else {
		slice = *maybeSocialApp.(*[]*SocialApp)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &socialAppR{}
		}
		args = append(args, object.AppID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &socialAppR{}
			}

			for _, a := range args {
				if a == obj.AppID {
					continue Outer
				}
			}

			args = append(args, obj.AppID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`config.user_social`),
		qm.WhereIn(`config.user_social.app_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_social")
	}

	var resultSlice []*UserSocial
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_social")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_social")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_social")
	}

	if len(userSocialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AppUserSocials = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userSocialR{}
			}
			foreign.R.App = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AppID == foreign.AppID {
				local.R.AppUserSocials = append(local.R.AppUserSocials, foreign)
				if foreign.R == nil {
					foreign.R = &userSocialR{}
				}
				foreign.R.App = local
				break
			}
		}
	}

	return nil
}

// SetSocialAppSocialAppType of the socialApp to the related item.
// Sets o.R.SocialAppSocialAppType to related.
// Adds o to related.R.SocialApp.
func (o *SocialApp) SetSocialAppSocialAppType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SocialAppType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"config\".\"social_app\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"social_app_type"}),
		strmangle.WhereClause("\"", "\"", 2, socialAppPrimaryKeyColumns),
	)
	values := []interface{}{related.SocialAppType, o.AppID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SocialAppType = related.SocialAppType
	if o.R == nil {
		o.R = &socialAppR{
			SocialAppSocialAppType: related,
		}
	} else {
		o.R.SocialAppSocialAppType = related
	}

	if related.R == nil {
		related.R = &socialAppTypeR{
			SocialApp: o,
		}
	} else {
		related.R.SocialApp = o
	}

	return nil
}

// AddAppUserSocials adds the given related objects to the existing relationships
// of the social_app, optionally inserting them as new records.
// Appends related to o.R.AppUserSocials.
// Sets related.R.App appropriately.
func (o *SocialApp) AddAppUserSocials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserSocial) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AppID = o.AppID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"config\".\"user_social\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"app_id"}),
				strmangle.WhereClause("\"", "\"", 2, userSocialPrimaryKeyColumns),
			)
			values := []interface{}{o.AppID, rel.UserSocialID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AppID = o.AppID
		}
	}

	if o.R == nil {
		o.R = &socialAppR{
			AppUserSocials: related,
		}
	} else {
		o.R.AppUserSocials = append(o.R.AppUserSocials, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userSocialR{
				App: o,
			}
		} else {
			rel.R.App = o
		}
	}
	return nil
}

// SocialApps retrieves all the records using an executor.
func SocialApps(mods ...qm.QueryMod) socialAppQuery {
	mods = append(mods, qm.From("\"config\".\"social_app\""))
	return socialAppQuery{NewQuery(mods...)}
}

// FindSocialApp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSocialApp(ctx context.Context, exec boil.ContextExecutor, appID int64, selectCols ...string) (*SocialApp, error) {
	socialAppObj := &SocialApp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"config\".\"social_app\" where \"app_id\"=$1", sel,
	)

	q := queries.Raw(query, appID)

	err := q.Bind(ctx, exec, socialAppObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from social_app")
	}

	return socialAppObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SocialApp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no social_app provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialAppColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	socialAppInsertCacheMut.RLock()
	cache, cached := socialAppInsertCache[key]
	socialAppInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			socialAppAllColumns,
			socialAppColumnsWithDefault,
			socialAppColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(socialAppType, socialAppMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(socialAppType, socialAppMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"config\".\"social_app\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"config\".\"social_app\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into social_app")
	}

	if !cached {
		socialAppInsertCacheMut.Lock()
		socialAppInsertCache[key] = cache
		socialAppInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SocialApp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SocialApp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	socialAppUpdateCacheMut.RLock()
	cache, cached := socialAppUpdateCache[key]
	socialAppUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			socialAppAllColumns,
			socialAppPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update social_app, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"config\".\"social_app\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, socialAppPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(socialAppType, socialAppMapping, append(wl, socialAppPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update social_app row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for social_app")
	}

	if !cached {
		socialAppUpdateCacheMut.Lock()
		socialAppUpdateCache[key] = cache
		socialAppUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q socialAppQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for social_app")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for social_app")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SocialAppSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"config\".\"social_app\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, socialAppPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in socialApp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all socialApp")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SocialApp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no social_app provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialAppColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	socialAppUpsertCacheMut.RLock()
	cache, cached := socialAppUpsertCache[key]
	socialAppUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			socialAppAllColumns,
			socialAppColumnsWithDefault,
			socialAppColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			socialAppAllColumns,
			socialAppPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert social_app, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(socialAppPrimaryKeyColumns))
			copy(conflict, socialAppPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"config\".\"social_app\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(socialAppType, socialAppMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(socialAppType, socialAppMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert social_app")
	}

	if !cached {
		socialAppUpsertCacheMut.Lock()
		socialAppUpsertCache[key] = cache
		socialAppUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SocialApp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SocialApp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SocialApp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), socialAppPrimaryKeyMapping)
	sql := "DELETE FROM \"config\".\"social_app\" WHERE \"app_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from social_app")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for social_app")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q socialAppQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no socialAppQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from social_app")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for social_app")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SocialAppSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(socialAppBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"config\".\"social_app\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, socialAppPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from socialApp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for social_app")
	}

	if len(socialAppAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SocialApp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSocialApp(ctx, exec, o.AppID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SocialAppSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SocialAppSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialAppPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"config\".\"social_app\".* FROM \"config\".\"social_app\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, socialAppPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SocialAppSlice")
	}

	*o = slice

	return nil
}

// SocialAppExists checks if the SocialApp row exists.
func SocialAppExists(ctx context.Context, exec boil.ContextExecutor, appID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"config\".\"social_app\" where \"app_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, appID)
	}
	row := exec.QueryRowContext(ctx, sql, appID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if social_app exists")
	}

	return exists, nil
}
